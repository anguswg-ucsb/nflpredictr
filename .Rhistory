dplyr::mutate(
current_date  = date,
min_date      = dplyr::lag(max_date) + 1,
min_date      = dplyr::case_when(
is.na(min_date) ~ max_date - 1,
TRUE            ~ min_date
)
) %>%
dplyr::filter(date >= min_date, date <= max_date) %>%
.$week
}
# if week is outside week range, set to week 1 of the current season
if(length(current_week) == 0) {
current_week <- 1
}
# if current week returns a preseason week, set current_week = 1
if(grepl("Pre", current_week)) {
current_week <- 1
}
# ensure week is a numeric
current_week <- as.numeric(current_week)
return(current_week)
}
week
# if NA year given,  default to current season
if(is.na(year)) {
year <- get_year()
}
# if NA week is entered, default to current week
if(is.na(week)) {
week <- get_week()
}
#' @title Find the week of the NFL season according to a date
#' @description returns week of the NFL season by a date, if no date is entered, default is to return the current week of the season.
#' @param date character date, YYYY-MM-DD. Default is NULL and date will set to the date the function was run
#' @importFrom magrittr `%>%`
#' @importFrom lubridate ymd
#' @importFrom rvest read_html html_nodes html_table
#' @importFrom janitor clean_names
#' @importFrom dplyr mutate case_when select summarise group_by ungroup arrange n lag filter
#' @importFrom stats setNames
#' @return character string of the current week of the NFL season
get_week <- function(date = NULL) {
# if no date is entered, set to date function is run
if(is.null(date)) {
date <- Sys.Date()
}
# check that date is in correct format
check_date <- lubridate::ymd(date, quiet = TRUE)
# error check
if(is.na(check_date)) {
stop("Incorrect date format, date must be in YYYY-MM-DD format")
}
# Current year
year  <- as.numeric(substr(date, 1, 4))
# Current month
month <- as.numeric(substr(date, 6, 7))
# If month is in part of season after Jan 1
if (month %in% c(1, 2, 3, 4)) {
year     <- year - 1
}
# year function is run
sys_year <- get_year()
# Construct URL
url  <- url(
paste0("https://www.pro-football-reference.com/years/", year ,"/games.htm"),
"rb"
)
# Read HTML page using URL
page <- rvest::read_html(url)
# close URL connection
close(url)
# closeAllConnections()
# Extract HTML nodes for table
page_nodes <-
page %>%
rvest::html_nodes("table")
# Extract season games
page_table <- rvest::html_table(
page_nodes[[1]],
header  = T,
fill    = T,
convert = F
) %>%
janitor::clean_names() %>%
dplyr::mutate(
home = case_when(
x == ""  ~ 1,
x == "@" ~ 0,
x == "N" ~ 0
)
) %>%
dplyr::select(1:3) %>%
stats::setNames(c("week", "day", "datex"))
# remove headers for each week
page_table <- page_table[!grepl("Week", page_table$week), ]
# remove empty rows
page_table <- page_table[!apply(page_table == "", 1, any),]
# if year is less than current year, dates are correctly formatted, no need to parse dates
if(year < sys_year) {
# remove headers for each week
page_table <- page_table[!grepl("Playoffs", page_table$week), ]
# Create a clean date and min max of dates for each week of games
page_table <-
page_table %>%
dplyr::group_by(week) %>%
dplyr::mutate(
min_date = min(datex),
max_date = max(datex)
) %>%
dplyr::ungroup()
# start and end of each NFL week, extract current week
current_week <-
page_table %>%
dplyr::group_by(week, min_date, max_date) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::arrange(min_date) %>%
dplyr::mutate(
week = 1:n()
) %>%
dplyr::mutate(
min_date      = as.Date(min_date),
max_date      = as.Date(max_date),
current_date  = date,
min_date      = dplyr::lag(max_date) + 1,
min_date      = dplyr::case_when(
is.na(min_date) ~ max_date - 1,
TRUE            ~ min_date
)
) %>%
dplyr::filter(date >= min_date, date <= max_date) %>%
.$week
} else {
# Create a clean date and min max of dates for each week of games
page_table <-
page_table %>%
dplyr::mutate(
year     = year,
new_year = dplyr::case_when(
grepl("January|February|March", datex) ~ year + 1,
TRUE                                   ~ year
),
date = as.Date(paste0(new_year, "-", substr(datex, 6, 10)))
# date = as.Date(paste(datex, new_year), format='%Y-%m-%d')
# date = gsub(sub('(-.*)\\-|-.*', '\\1', datex), new_year, datex)
# date = as.Date(paste(datex, new_year), format='%b %d %Y')
) %>%
dplyr::group_by(week) %>%
dplyr::mutate(
min_date = min(date),
max_date = max(date)
) %>%
dplyr::ungroup()
# start and end of each NFL week, extract current week
current_week <-
page_table %>%
dplyr::group_by(week, min_date, max_date) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::arrange(min_date) %>%
dplyr::mutate(
current_date  = date,
min_date      = dplyr::lag(max_date) + 1,
min_date      = dplyr::case_when(
is.na(min_date) ~ max_date - 1,
TRUE            ~ min_date
)
) %>%
dplyr::filter(date >= min_date, date <= max_date) %>%
.$week
}
# if week is outside week range, set to week 1 of the current season
if(length(current_week) == 0) {
current_week <- 1
}
# if current week returns a preseason week, set current_week = 1
if(grepl("Pre", current_week)) {
current_week <- 1
}
# ensure week is a numeric
current_week <- as.numeric(current_week)
return(current_week)
}
get_week()
# if NA year given,  default to current season
if(is.na(year)) {
year <- get_year()
}
# if NA week is entered, default to current week
if(is.na(week)) {
week <- get_week()
}
# if no year is entered, default to current season
if(is.null(year)) {
year <- get_year()
}
# if no week is entered, default to current week
if(is.null(week)) {
week <- get_week()
}
week
year
# Construct API URL
url <- paste0(base_url, "year=", year, "&pred_week=", week)
url
# message to user
message(paste0("\n\nSending request to nflwinpredictor API...\nRequest URL:\n", url))
# Post request to API and format responce into dataframe
win_api <-
url %>%
httr::POST() %>%
httr::content(as = "parsed")
win_api
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-home_win_prob )
win_api
year = NULL
week = NULL
source("R/get_year.R")
source("R/get_week.R")
source("R/get_week_dates.R")
source("R/utils.R")
source("R/get_nfl_teams.R")
source("R/get_vegas.R")
source("R/win_model_data.R")
library(tidyverse)
#' @param week numeric value for the week of the season to predict
#' @param base_url character base URL to NFL Win Predictor API. Default is: "http://68.183.25.9:8000/predict-new-data?"
#' @importFrom dplyr tibble arrange select bind_rows
#' @importFrom magrittr `%>%`
#' @importFrom httr POST content
#' @return tibble with a row for each matchup between teams for the desired week. There is basic identifying information on each game and three columns representing the model predicted outcomes: .pred_class, .pred_1, .pred_0. .pred_class gives a 1 if the home team is predicted to win, and a 0 if the home team is predicted to lose. The .pred_1 and .pred_0 columns indicate the probability of either class occurring.
#' @examples
#' # Predict week 8 of the 2021 NFL season
#' predict_games(year = 2021, week = 8)
#' @export
predict_games <- function(
year     = NULL,
week     = NULL,
base_url = "http://68.183.25.9:8000/predict-new-data?"
) {
# if no year is entered, default to current season
if(is.null(year)) {
year <- get_year()
}
# if no week is entered, default to current week
if(is.null(week)) {
week <- get_week()
}
# Construct API URL
url <- paste0(base_url, "year=", year, "&pred_week=", week)
# message to user
message(paste0("\n\nSending request to nflwinpredictor API...\nRequest URL:\n", url))
# Post request to API and format responce into dataframe
win_api <-
url %>%
httr::POST() %>%
httr::content(as = "parsed")
# if an error is returned from the API
if (any(grepl("Internal server error", win_api) == TRUE)) {
stop(
paste0("\nInvalid inputs:\nyear = ", year, "\nweek = ", week)
)
}
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-home_win_prob )
return(win_api)
# # if NA year given,  default to current season
# if(is.na(year)) {
#   year <- get_year()
# }
#
# # if NA week is entered, default to current week
# if(is.na(week)) {
#   week <- get_week()
# }
#
# # if no year is entered, default to current season
# if(is.null(year)) {
#
#   year <- get_year()
#
# }
#
# # if no week is entered, default to current week
# if(is.null(week)) {
#
#   week <- get_week()
#
# }
# # scrape new data to input into model
# scrape_data <- scrape_games(
#   year      = year,
#   pred_week = week
# )
#
# # generate predictions
# prediction_df <-
#   win_model %>%
#   tune::augment(new_data = scrape_data) %>%
#   dplyr::select(
#     season, week, game_id,
#     home_team     = team,
#     away_team     = opponent,
#     win           = .pred_class,
#     home_win_prob = .pred_1,
#     away_win_prob = .pred_0
#   )
#
# return(prediction_df)
# library(devtools)
# year = NULL
# week = NULL
# source("R/get_year.R")
# source("R/get_week.R")
# source("R/get_week_dates.R")
# source("R/utils.R")
# source("R/get_nfl_teams.R")
# source("R/get_vegas.R")
# source("R/win_model_data.R")
# library(tidyverse)
# library(tune)
# win_model <- readRDS("win_model_logistic_reg.rds")
# usethis::use_data(win_model, internal = TRUE, overwrite = T)
}
predict_games(year = 2022, week = 2)
predict_games(year = 2022, week = 1)
#' @param week numeric value for the week of the season to predict
#' @param base_url character base URL to NFL Win Predictor API. Default is: "http://68.183.25.9:8000/predict-new-data?"
#' @importFrom dplyr tibble arrange select bind_rows
#' @importFrom magrittr `%>%`
#' @importFrom httr POST content
#' @return tibble with a row for each matchup between teams for the desired week. There is basic identifying information on each game and three columns representing the model predicted outcomes: .pred_class, .pred_1, .pred_0. .pred_class gives a 1 if the home team is predicted to win, and a 0 if the home team is predicted to lose. The .pred_1 and .pred_0 columns indicate the probability of either class occurring.
#' @examples
#' # Predict week 8 of the 2021 NFL season
#' predict_games(year = 2021, week = 8)
#' @export
predict_games <- function(
year     = NULL,
week     = NULL,
base_url = "http://68.183.25.9:8000/predict-new-data?"
) {
# stop if week 1, TODO, fix DO droplet API
if(week == 1) {
stop(paste0("Invalid 'week' argument\n'week' must be > 1"))
}
# if no year is entered, default to current season
if(is.null(year)) {
year <- get_year()
}
# if no week is entered, default to current week
if(is.null(week)) {
week <- get_week()
}
# Construct API URL
url <- paste0(base_url, "year=", year, "&pred_week=", week)
# message to user
message(paste0("\n\nSending request to nflwinpredictor API...\nRequest URL:\n", url))
# Post request to API and format responce into dataframe
win_api <-
url %>%
httr::POST() %>%
httr::content(as = "parsed")
# if an error is returned from the API
if (any(grepl("Internal server error", win_api) == TRUE)) {
stop(
paste0("\nInvalid inputs:\nyear = ", year, "\nweek = ", week)
)
}
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-home_win_prob )
return(win_api)
# # if NA year given,  default to current season
# if(is.na(year)) {
#   year <- get_year()
# }
#
# # if NA week is entered, default to current week
# if(is.na(week)) {
#   week <- get_week()
# }
#
# # if no year is entered, default to current season
# if(is.null(year)) {
#
#   year <- get_year()
#
# }
#
# # if no week is entered, default to current week
# if(is.null(week)) {
#
#   week <- get_week()
#
# }
# # scrape new data to input into model
# scrape_data <- scrape_games(
#   year      = year,
#   pred_week = week
# )
#
# # generate predictions
# prediction_df <-
#   win_model %>%
#   tune::augment(new_data = scrape_data) %>%
#   dplyr::select(
#     season, week, game_id,
#     home_team     = team,
#     away_team     = opponent,
#     win           = .pred_class,
#     home_win_prob = .pred_1,
#     away_win_prob = .pred_0
#   )
#
# return(prediction_df)
# library(devtools)
# year = NULL
# week = NULL
# source("R/get_year.R")
# source("R/get_week.R")
# source("R/get_week_dates.R")
# source("R/utils.R")
# source("R/get_nfl_teams.R")
# source("R/get_vegas.R")
# source("R/win_model_data.R")
# library(tidyverse)
# library(tune)
# win_model <- readRDS("win_model_logistic_reg.rds")
# usethis::use_data(win_model, internal = TRUE, overwrite = T)
}
predict_games(2022, 1)
predict_games(2022, 5)
library(devtools)
devtools::document()
devtools::check()
knitr::knit("README.Rmd", "README.md")
# Load package
library(nflpredictr)
nflpredictr::predict_games(2022, 1)
predict_games(2022, 5)
# Make an API request using predict_games(), default week is the upcoming week of the season
nflpredictr::predict_games(
year = 2022
)
library(devtools)
devtools::document()
devtools::check()
# Load package
library(nflpredictr)
# Make an API request using predict_games(), default week is the upcoming week of the season
nflpredictr::predict_games(
year = 2022
)
# Make an API request using predict_games(), default week is the upcoming week of the season
nflpredictr::predict_games(
year = 2022
)
# Make an API request using predict_games() for a specific year and week
nflpredictr::predict_games(
year = 2018,
week = 8
)
# Plot the outputs from predict_games()
fav_plot <- nflpredictr::plot_favored(
predictions = nflpredictr::predict_games(
year = 2022
),
prob_alpha  = FALSE
)
fav_plot
ggplot2::ggsave(fav_plot, "plot_fav.png",
width = 12,
height = 8)
ggplot2::ggsave(plot = fav_plot,
filename = "man/figures/plot_fav2.png",
width = 12,
height = 8)
ggplot2::ggsave(plot = fav_plot,
filename = "man/figures/plot_fav.png",
width = 12,
height = 8)
# Plot the outputs from predict_games()
nflpredictr::plot_tile(
predictions = nflpredictr::predict_games(
year = 2022,
week = 5
)
)
# Plot the outputs from predict_games()
tile_plot <- nflpredictr::plot_tile(
predictions = nflpredictr::predict_games(
year = 2022,
week = 5
)
)
ggplot2::ggsave(plot = tile_plot,
filename = "man/figures/tile_plot.png",
width = 12,
height = 8)
