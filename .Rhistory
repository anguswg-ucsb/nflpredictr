}
# load html table of game odds
odds_tbl <-
page_table %>%
rvest::html_table(header = T) %>%
stats::na.omit() %>%
janitor::clean_names() %>%
dplyr::mutate(dplyr::across(where(is.numeric), as.character))
# parse date time column
parse_date <- as.Date(
gsub(" ", "", strsplit(odds_tbl$date_time[1], "@")[[1]][1]),
format="%m/%d/%y"
)
# add parse_date as a date column, join team abbreviations with team name and keep relevent columns
odds_tbl <-
odds_tbl %>%
dplyr::mutate(
date = parse_date
) %>%
dplyr::left_join(
get_nfl_teams(),
by = c("team" = "team_name")
) %>%
dplyr::select(-date_time, -team)
# date of the game from website
odate <- odds_tbl$date[1]
# match dates of games with week of season
odds_week <-
week_dates %>%
dplyr::mutate(
date        = odate,
check_week  = dplyr::case_when(
date >= week_start & date <= week_end ~ TRUE,
TRUE                                  ~ FALSE
)
) %>%
dplyr::filter(check_week == TRUE) %>%
dplyr::select(season, week, date)
# get schedule for season/week of odds table
matchups <- get_matchups(
year    = odds_week$season,
week    = odds_week$week,
verbose = FALSE
)
# home and away info
game_location <-
matchups %>%
tidyr::pivot_longer(
cols      = c(home_team, away_team),
names_to  = "homeaway",
values_to = "team_abb") %>%
dplyr::filter(team_abb %in% odds_tbl$team_abb) %>%
dplyr::select(season, week, game_id, homeaway, team_abb)
# extract betting odds data
odds_tbl <-
odds_tbl %>%
dplyr::left_join(
game_location,
by = c("team_abb")
) %>%
# dplyr::mutate(
#   homeaway = c("away_team", "home_team")
# ) %>%
dplyr::relocate(team = team_abb, homeaway) %>%
dplyr::mutate(
spread = dplyr::case_when(
grepl("EVEN", spread) ~ 0,
TRUE ~ as.numeric(sub("\\s.*","", spread))
),
total = as.numeric(sub("\\D*(\\d+).*", "\\1", total)),
win   = as.numeric(win)
)
# home team
home <-
odds_tbl %>%
dplyr::filter(homeaway == "home_team") %>%
# dplyr::relocate(home_team = team) %>%
dplyr::select(season, week, game_id, home_team = team, date, spread, win, total)
# away team
away <-
odds_tbl %>%
dplyr::filter(homeaway == "away_team") %>%
dplyr::select(away_team = team)
# Bind columns of home and away teams into single row
vegas_odds <-
home %>%
dplyr::bind_cols(away) %>%
dplyr::mutate(
favored = dplyr::case_when(
spread > 0  ~ 0,  # If spread is positive, away team is favored,
spread < 0  ~ 1,  # If spread is negative, home team is favored
spread == 0 ~ 0
)
) %>%
dplyr::relocate(season, week, game_id, date, home_team, away_team, favored)
return(vegas_odds)
}
v <- get_vegas()
v <- get_vegas(all_weeks = TRUE)
View(v)
#' @importFrom progress progress_bar
#' @examples
#' # Retrieve Vegas Odds for current week
#' current_odds <- get_vegas(all_weeks = FALSE)
#' current_odds
#'
#' # Retrieve Vegas Odds for all avaliable weeks
#' all_odds <- get_vegas(all_weeks = TRUE)
#' all_odds
#' @export
get_vegas <- function(all_weeks = FALSE) {
# URL to NFl odds tables
vegas_url <- "https://vegas-odds.com/nfl/odds/"
message(paste0("Retrieving Las Vegas betting odds...\nURL: ", vegas_url))
vegas_page <- rvest::read_html(vegas_url)
# vegas odds table nodes
vegas_tbls <-
vegas_page %>%
rvest::html_nodes("table")
# current week
current_week  <- get_week()
# dates associated with weeks of NFL season
week_dates    <- get_week_dates()
# current week date
max_week_date <-
week_dates %>%
dplyr::filter(week == current_week)
# empty list to add odds tables to
odds_lst <- list()
# progress bar
pb <- progress::progress_bar$new(total = length(vegas_tbls))
# loop through each table containing the odds for each game
for (i in 1:length(vegas_tbls)) {
# progress bar ticker
pb$tick()
tbl_date <- parse_table(page_table = vegas_tbls[[i]])
# If only current week is desired
if(all_weeks == FALSE) {
# if parsed date is within range of current week, make odds table
if(tbl_date >= max_week_date$week_start & tbl_date <= max_week_date$week_end) {
vegas_odds <- make_odds_table(
page_table = vegas_tbls[[i]],
date_table = week_dates
)
# if parsed date NOT within range of current week, skip to next iteration
} else {
next
}
# If all weeks are desired
} else {
# clean odds table
vegas_odds <- make_odds_table(
page_table = vegas_tbls[[i]],
date_table = week_dates
)
}
# add vegas odds dataframe to list of odds tables
odds_lst[[i]] <- vegas_odds
}
# bind rows and arrange by week
odds_df <-
odds_lst %>%
dplyr::bind_rows() %>%
dplyr::arrange(week)
return(odds_df)
}
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
vegas_odds <- get_vegas()
knitr::knit("README.Rmd", "README.md")
predictions <- nflpredictr::predict_games()
bar_plot          = FALSE
pct_over_coinflip = T
prob_alpha        = TRUE
bar_plot          = FALSE
predictions
pct_over_coinflip == TRUE
bar_plot == TRUE
# prediction probabilities
game_probs <-
predictions %>%
dplyr::mutate(
probability = dplyr::case_when(
.pred_class == "1" ~ (.pred_1) - 0.5,
.pred_class == "0" ~ (.pred_0) - 0.5
),
fill        = dplyr::case_when(
.pred_class == "1" ~ "Home win",
.pred_class == "0" ~ "Home loss"
),
winning_team = dplyr::case_when(
.pred_class == "1" ~ home_team,
.pred_class == "0" ~ away_team
),
win_type = dplyr::case_when(
winning_team == home_team ~ "Home win",
winning_team == away_team ~ "Away win"
),
clean_matchup = paste0(away_team, " @ ", home_team)
)
prob_alpha == TRUE
# prediction probabilities plot with probability alpha
game_probs_plot <-
game_probs %>%
ggplot2::ggplot() +
ggplot2::geom_point(aes(x = probability, y = stats::reorder(winning_team, probability),
col = win_type,
alpha = probability), size = 4) +
ggplot2::geom_segment(aes(x = 0, xend = probability, y = winning_team, yend = winning_team,
col = win_type,
alpha = probability), size = 1.5)
game_probs_plot
# prediction probabilities plot
# game_probs_plot <-
game_probs_plot +
ggplot2::scale_color_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 0.5),
breaks = seq(0, 0.5, by = 0.10),
expand = c(0, 0),
labels = scales::percent
) +
ggplot2::labs(
title    = paste0("NFL Game Predictions"),
subtitle = paste0("Week: ", game_probs$week[1], "\nSeason: ", game_probs$season[1]),
x        = "Probability",
y        = "Favored team",
col      = "Outcome"
) +
ggplot2::guides(alpha = "none") +
ggplot2::theme_bw() +
ggplot2::theme(
plot.title       = ggplot2::element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle    = ggplot2::element_text(size = 12, hjust = 0.5),
axis.title       = ggplot2::element_text(face = "bold", size = 12),
axis.text        = ggplot2::element_text(size = 10),
legend.text      = ggplot2::element_text(size = 10),
legend.title     = ggplot2::element_text(face = "bold", hjust = 0.5, size = 10),
axis.ticks       = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
)
game_probs_plot +
ggplot2::scale_color_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 0.5),
breaks = seq(0.5, 1, by = 0.10),
expand = c(0, 0),
labels = scales::percent
)
# prediction probabilities plot
# game_probs_plot <-
game_probs_plot +
ggplot2::scale_color_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 0.5),
breaks = seq(0.5, 1, by = 0.10),
expand = c(0, 0),
labels = scales::percent
) +
ggplot2::labs(
title    = paste0("NFL Game Predictions"),
subtitle = paste0("Week: ", game_probs$week[1], "\nSeason: ", game_probs$season[1]),
x        = "Probability",
y        = "Favored team",
col      = "Outcome"
) +
ggplot2::guides(alpha = "none") +
ggplot2::theme_bw() +
ggplot2::theme(
plot.title       = ggplot2::element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle    = ggplot2::element_text(size = 12, hjust = 0.5),
axis.title       = ggplot2::element_text(face = "bold", size = 12),
axis.text        = ggplot2::element_text(size = 10),
legend.text      = ggplot2::element_text(size = 10),
legend.title     = ggplot2::element_text(face = "bold", hjust = 0.5, size = 10),
axis.ticks       = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
)
# prediction probabilities plot
# game_probs_plot <-
game_probs_plot +
ggplot2::scale_color_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 1),
breaks = seq(0.5, 1, by = 0.10),
expand = c(0, 0),
labels = scales::percent
) +
ggplot2::labs(
title    = paste0("NFL Game Predictions"),
subtitle = paste0("Week: ", game_probs$week[1], "\nSeason: ", game_probs$season[1]),
x        = "Probability",
y        = "Favored team",
col      = "Outcome"
) +
ggplot2::guides(alpha = "none") +
ggplot2::theme_bw() +
ggplot2::theme(
plot.title       = ggplot2::element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle    = ggplot2::element_text(size = 12, hjust = 0.5),
axis.title       = ggplot2::element_text(face = "bold", size = 12),
axis.text        = ggplot2::element_text(size = 10),
legend.text      = ggplot2::element_text(size = 10),
legend.title     = ggplot2::element_text(face = "bold", hjust = 0.5, size = 10),
axis.ticks       = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
)
# prediction probabilities plot
# game_probs_plot <-
game_probs_plot +
ggplot2::scale_color_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0.5, 1),
breaks = seq(0.5, 1, by = 0.10),
expand = c(0, 0),
labels = scales::percent
) +
ggplot2::labs(
title    = paste0("NFL Game Predictions"),
subtitle = paste0("Week: ", game_probs$week[1], "\nSeason: ", game_probs$season[1]),
x        = "Probability",
y        = "Favored team",
col      = "Outcome"
) +
ggplot2::guides(alpha = "none") +
ggplot2::theme_bw() +
ggplot2::theme(
plot.title       = ggplot2::element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle    = ggplot2::element_text(size = 12, hjust = 0.5),
axis.title       = ggplot2::element_text(face = "bold", size = 12),
axis.text        = ggplot2::element_text(size = 10),
legend.text      = ggplot2::element_text(size = 10),
legend.title     = ggplot2::element_text(face = "bold", hjust = 0.5, size = 10),
axis.ticks       = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
)
# prediction probabilities
game_probs <-
predictions %>%
dplyr::mutate(
probability = dplyr::case_when(
.pred_class == "1" ~ (.pred_1) - 0.5,
.pred_class == "0" ~ (.pred_0) - 0.5
),
fill        = dplyr::case_when(
.pred_class == "1" ~ "Home win",
.pred_class == "0" ~ "Home loss"
),
winning_team = dplyr::case_when(
.pred_class == "1" ~ home_team,
.pred_class == "0" ~ away_team
),
win_type = dplyr::case_when(
winning_team == home_team ~ "Home win",
winning_team == away_team ~ "Away win"
),
clean_matchup = paste0(away_team, " @ ", home_team)
)
game_probs
# prediction probabilities plot
game_probs <-
predictions %>%
dplyr::mutate(
probability = dplyr::case_when(
.pred_class == "1" ~ .pred_1,
.pred_class == "0" ~ .pred_0
),
fill        = dplyr::case_when(
.pred_class == "1" ~ "Home win",
.pred_class == "0" ~ "Home loss"
),
winning_team = dplyr::case_when(
.pred_class == "1" ~ home_team,
.pred_class == "0" ~ away_team
),
win_type = dplyr::case_when(
winning_team == home_team ~ "Home win",
winning_team == away_team ~ "Away win"
),
clean_matchup = paste0(away_team, " @ ", home_team)
)
# prediction probabilities plot with probability alpha
game_probs_plot <-
game_probs %>%
ggplot2::ggplot() +
ggplot2::geom_col(aes(x = probability,
y = stats::reorder(winning_team, probability),
fill = win_type,
alpha = probability)
)
game_probs_plot
# prediction probabilities plot w/o probability alpha
game_probs_plot <-
game_probs %>%
ggplot2::ggplot() +
ggplot2::geom_col(aes(x = probability,
y = stats::reorder(winning_team, probability),
fill = win_type)
)
game_probs_plot
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.1),
expand = c(0, 0),
labels = scales::percent
)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0.5, 1),
breaks = seq(0.5, 1, by = 0.1),
expand = c(0, 0),
labels = scales::percent
)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0.5, 1),
breaks = seq(0.5, 1, by = 0.1),
# expand = c(0, 0),
labels = scales::percent
)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0.5, 1),
breaks = seq(0.5, 1, by = 0.1),
# expand = c(0, 0),
labels = scales::percent
)
game_probs_plot
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0.5, 1),
# breaks = seq(0.5, 1, by = 0.1),
# expand = c(0, 0),
labels = scales::percent
)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 1),
# breaks = seq(0.5, 1, by = 0.1),
# expand = c(0, 0),
labels = scales::percent
)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::scale_x_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.1),
expand = c(0.5, 1),
labels = scales::percent
)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::xlim(c(0.5, 1))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::xlim(c(0.4, 1))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen"))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::ylim(c(0.4, 1))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::xlim(c(0.4, 1))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::xlim(c(0, 1))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::xlim(c(0, 0.5))
game_probs
max(game_probs$probability)
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
xlim(0.50, max(game_probs$probability))
game_probs_plot +
ggplot2::scale_fill_manual(values = c("dodgerblue3", "forestgreen")) +
ggplot2::xlim(0.50, max(game_probs$probability))
game_probs_plot +
ggplot2::xlim(0.50, max(game_probs$probability))
# Load package
library(nflpredictr)
# Make an API request using predict_games()
nflpredictr::predict_games(
year = 2022,
week = 1
)
# Plot the outputs from predict_games()
fav_plot <- nflpredictr::plot_favored(
predictions = nflpredictr::predict_games(
year = 2022,
week = 1
),
prob_alpha  = FALSE
)
fav_plot
vegas_odds <- nflpredictr::get_vegas()
devtools::document()
devtools::load_all()
get_vegas()
devtools::check()
knitr::knit("README.Rmd", "README.md")
