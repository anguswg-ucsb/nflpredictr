win_api <-
url %>%
httr::POST() %>%
httr::content(as = "parsed")
if (any(grepl("Internal server error", win_api) == TRUE)) {
stop(paste0("\nPotentially invalid inputs (i.e. year > current season, week > upcoming week):\nyear = ", year,
"\nweek = ", week))
return(NULL)
}
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-.pred_1)
return(win_api)
}
predict_games()
get_year()
#' @title Find the year of the NFL season for a given date
#' @description Returns numeric year of the NFL season for a given date
#' @param date character string date, default is NULL and date will set to the date the function was run
#' @return numeric indicating the season year
get_year <- function(date = NULL) {
if(is.null(date)) {
# current date when function is run in VM
date <- Sys.Date()
}
# Current year
year  <- as.numeric(substr(date, 1, 4))
# Current month
month <- as.numeric(substr(date, 6, 7))
# If month is in part of season after Jan 1
if (month %in% c(1, 2, 3, 4)) {
year <- year - 1
}
return(year)
}
get_year()
usethis::use_r("get_week.R")
week <- get_week()
#' @title Find the week of the NFL season according to a date
#' @description returns week of the NFL season by a date, if no date is entered, default is to return the current week of the season.
#' @param date character date, YYYY-MM-DD. Default is NULL and date will set to the date the function was run
#' @importFrom magrittr `%>%`
#' @importFrom rvest read_html html_nodes html_table
#' @importFrom janitor clean_names
#' @importFrom dplyr mutate case_when select summarise group_by ungroup arrange n lag filter
#' @importFrom stats setNames
#' @return character string of the current week of the NFL season
get_week <- function(date = NULL) {
# if no date is entered, set to date function is run
if(is.null(date)) {
date <- Sys.Date()
}
# Current year
year  <- as.numeric(substr(date, 1, 4))
# Current month
month <- as.numeric(substr(date, 6, 7))
# If month is in part of season after Jan 1
if (month %in% c(1, 2, 3, 4)) {
year     <- year - 1
}
# year function is run
sys_year <- get_year()
# Construct URL
url  <- paste0("https://www.pro-football-reference.com/years/", year ,"/games.htm")
# Read HTML page using URL
page <- rvest::read_html(url)
# Extract HTML nodes for table
page_nodes <-
page %>%
rvest::html_nodes("table")
# Extract season games
page_table <- rvest::html_table(
page_nodes[[1]],
header  = T,
fill    = T,
convert = F
) %>%
janitor::clean_names() %>%
dplyr::mutate(
home = case_when(
x == ""  ~ 1,
x == "@" ~ 0,
x == "N" ~ 0
)
) %>%
dplyr::select(1:3) %>%
stats::setNames(c("week", "day", "datex"))
# remove headers for each week
page_table <- page_table[!grepl("Week", page_table$week), ]
# remove empty rows
page_table <- page_table[!apply(page_table == "", 1, any),]
# if year is less than current year, dates are correctly formatted, no need to parse dates
if(year < sys_year) {
# remove headers for each week
page_table <- page_table[!grepl("Playoffs", page_table$week), ]
# Create a clean date and min max of dates for each week of games
page_table <-
page_table %>%
dplyr::group_by(week) %>%
dplyr::mutate(
min_date = min(datex),
max_date = max(datex)
) %>%
dplyr::ungroup()
# start and end of each NFL week, extract current week
current_week <-
page_table %>%
dplyr::group_by(week, min_date, max_date) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::arrange(min_date) %>%
dplyr::mutate(
week = 1:n()
) %>%
dplyr::mutate(
min_date      = as.Date(min_date),
max_date      = as.Date(max_date),
current_date  = date,
min_date      = dplyr::lag(max_date) + 1,
min_date      = dplyr::case_when(
is.na(min_date) ~ max_date - 1,
TRUE            ~ min_date
)
) %>%
dplyr::filter(date >= min_date, date <= max_date) %>%
.$week
} else {
# Create a clean date and min max of dates for each week of games
page_table <-
page_table %>%
dplyr::mutate(
year     = year,
new_year = dplyr::case_when(
grepl("January|February|March", datex) ~ year + 1,
TRUE                                   ~ year
),
date = as.Date(paste(datex, new_year), format='%b %d %Y')
) %>%
dplyr::group_by(week) %>%
dplyr::mutate(
min_date = min(date),
max_date = max(date)
) %>%
dplyr::ungroup()
# start and end of each NFL week, extract current week
current_week <-
page_table %>%
dplyr::group_by(week, min_date, max_date) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::arrange(min_date) %>%
dplyr::mutate(
current_date  = date,
min_date      = dplyr::lag(max_date) + 1,
min_date      = dplyr::case_when(
is.na(min_date) ~ max_date - 1,
TRUE            ~ min_date
)
) %>%
dplyr::filter(date >= min_date, date <= max_date) %>%
.$week
}
# if week is outside week range, set to week 1 of the current season
if(length(current_week) == 0) {
current_week <- 1
}
# if current week returns a preseason week, set current_week = 1
if(grepl("Pre", current_week)) {
current_week <- 1
}
# ensure week is a numeric
current_week <- as.numeric(current_week)
return(current_week)
}
week <- get_week()
week
devtools::check()
year = 2022
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-.pred_1)
return(win_api)
#' @title Request predictions from NFL Win Predictor API
#' @description Returns numeric year of the NFL season for a given date
#' @param year character or numeric year of season to get predictions for
#' @param week numeric value for the week of the season to predict
#' @param base_url character string defining the base API endpoint URL. Default is predict-new-data endpoint
#' @importFrom httr POST content
#' @importFrom dplyr tibble arrange
#' @importFrom magrittr `%>%`
#' @return numeric indicating the season year
#' @export
predict_games <- function(
year = NULL,
week = NULL,
base_url = "http://68.183.25.9:8000/predict-new-data?"
) {
# if no year is entered, default to current season
if(is.null(year)) {
year <- get_year()
}
# if no week is entered, default to current week
if(is.null(week)) {
week <- get_week()
}
# Construct API URL
url <- paste0(base_url, "year=", year, "&pred_week=", week)
# message to user
message(paste0("\n\nSending request to nflwinpredictor API...\nRequest URL:\n", url))
# Post request to API and format responce into dataframe
win_api <-
url %>%
httr::POST() %>%
httr::content(as = "parsed")
if (any(grepl("Internal server error", win_api) == TRUE)) {
stop(paste0("\nPotentially invalid inputs (i.e. year > current season, week > upcoming week):\nyear = ", year,
"\nweek = ", week))
return(NULL)
}
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-.pred_1)
return(win_api)
}
year = 2022
week = 1
wins <- nflpredictr::predict_games(year = 2022, week = 1)
library(hexSticker)
tmp_gg <-
wins %>%
dplyr::mutate(
size = dplyr::case_when(
.pred_class == "1" ~ (.pred_1),
.pred_class == "0" ~ (.pred_0)
)
) %>%
ggplot2::ggplot() +
ggplot2::geom_col(aes(x = home_team, y = .pred_1, fill = .pred_class), alpha = 1) +
ggplot2::scale_fill_manual(values = c("red3", "forestgreen")) +
ggplot2::scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), labels = scales::percent) +
ggplot2::labs(
x = "",
y = ""
) +
ggplot2::theme_void() +
hexSticker::theme_transparent() +
ggplot2::theme(
legend.position = "none",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90, size = 8, color = "white", face = "bold", vjust = 0.5, hjust = 0.5),
axis.text.y = element_text(size = 8, color = "white",  face = "bold", vjust = -0.4),
panel.background = element_rect(fill = 'black', color = 'black')
)
tmp_gg
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "white",
filename = "inst/figures/nflpredictr.png"
# dpi = 500
)
plot(s)
year = 2022
week = 1
wins <- nflpredictr::predict_games(year = 2022, week = 1)
library(hexSticker)
tmp_gg <-
wins %>%
dplyr::mutate(
size = dplyr::case_when(
.pred_class == "1" ~ (.pred_1),
.pred_class == "0" ~ (.pred_0)
)
) %>%
ggplot2::ggplot() +
ggplot2::geom_col(aes(x = home_team, y = .pred_1, fill = .pred_class), alpha = 1) +
ggplot2::scale_fill_manual(values = c("red3", "forestgreen")) +
ggplot2::scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), labels = scales::percent) +
ggplot2::labs(
x = "",
y = ""
) +
ggplot2::theme_void() +
hexSticker::theme_transparent() +
ggplot2::theme(
legend.position = "none",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90, size = 8, color = "white", face = "bold", vjust = 0.5, hjust = 0.5),
axis.text.y = element_text(size = 8, color = "white",  face = "bold", vjust = -0.4),
panel.background = element_rect(fill = 'black', color = 'black')
)
tmp_gg <-
wins %>%
dplyr::mutate(
size = dplyr::case_when(
.pred_class == "1" ~ (.pred_1),
.pred_class == "0" ~ (.pred_0)
)
) %>%
ggplot2::ggplot() +
ggplot2::geom_col(aes(x = home_team, y = .pred_1, fill = .pred_class), alpha = 1) +
ggplot2::scale_fill_manual(values = c("red3", "forestgreen")) +
ggplot2::scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), labels = scales::percent) +
ggplot2::labs(
x = "",
y = ""
) +
ggplot2::theme_void() +
hexSticker::theme_transparent() +
ggplot2::theme(
legend.position = "none",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90, size = 8, color = "white", face = "bold", vjust = 0.5, hjust = 0.5),
axis.text.y = element_text(size = 8, color = "white",  face = "bold", vjust = -0.4),
panel.background = element_rect(fill = 'black', color = 'black')
)
tmp_gg
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "white",
filename = "inst/figures/nflpredictr.png",
dpi = 500
)
plot(s)
tmp_gg <-
wins %>%
dplyr::mutate(
size = dplyr::case_when(
.pred_class == "1" ~ (.pred_1),
.pred_class == "0" ~ (.pred_0)
)
) %>%
ggplot2::ggplot() +
ggplot2::geom_col(aes(x = home_team, y = .pred_1, fill = .pred_class), alpha = 1) +
ggplot2::scale_fill_manual(values = c("red3", "forestgreen")) +
ggplot2::scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), labels = scales::percent) +
ggplot2::labs(
x = "",
y = ""
) +
ggplot2::theme_void() +
hexSticker::theme_transparent() +
ggplot2::theme(
legend.position = "none",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90, size = 12, color = "white", face = "bold", vjust = 0.5, hjust = 0.5),
axis.text.y = element_text(size = 12, color = "white",  face = "bold", vjust = -0.4),
panel.background = element_rect(fill = 'black', color = 'black')
)
tmp_gg
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "white",
filename = "inst/figures/nflpredictr.png",
dpi = 500
)
plot(s)
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "#08080",
filename = "inst/figures/nflpredictr.png",
dpi = 500
)
plot(s)
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "green",
filename = "inst/figures/nflpredictr.png",
dpi = 500
)
plot(s)
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "forestgreen",
filename = "inst/figures/nflpredictr.png",
dpi = 500
)
plot(s)
s <- sticker(
tmp_gg,
package  = "nflpredictr",
p_size   = 28,
s_x      = 1,
s_y      = 0.8,
s_width  = 1.2,
s_height = 0.65,
h_fill   = "black",
h_color  = "grey",
filename = "inst/figures/nflpredictr.png",
dpi = 500
)
plot(s)
# library(nflpredictr)
nflpredictr::predict_games(
year = 2022,
week = 1
)
#' @title Request predictions from NFL Win Predictor API
#' @description Returns numeric year of the NFL season for a given date
#' @param year character or numeric year of season to get predictions for
#' @param week numeric value for the week of the season to predict
#' @param base_url character string defining the base API endpoint URL. Default is predict-new-data endpoint
#' @importFrom httr POST content
#' @importFrom dplyr tibble arrange
#' @importFrom magrittr `%>%`
#' @return numeric indicating the season year
#' @export
predict_games <- function(
year = NULL,
week = NULL,
base_url = "http://68.183.25.9:8000/predict-new-data?"
) {
# if no year is entered, default to current season
if(is.null(year)) {
year <- get_year()
}
# if no week is entered, default to current week
if(is.null(week)) {
week <- get_week()
}
# Construct API URL
url <- paste0(base_url, "year=", year, "&pred_week=", week)
# message to user
message(paste0("\n\nSending request to nflwinpredictor API...\nRequest URL:\n", url))
# Post request to API and format responce into dataframe
win_api <-
url %>%
httr::POST() %>%
httr::content(as = "parsed")
if (any(grepl("Internal server error", win_api) == TRUE)) {
stop(paste0("\nPotentially invalid inputs (i.e. year > current season, week > upcoming week):\nyear = ", year,
"\nweek = ", week))
return(NULL)
}
# convert parsed list to tibble, arrange by highest probability of winning
win_api <-
win_api %>%
dplyr::bind_rows() %>%
dplyr::tibble() %>%
dplyr::arrange(-.pred_1)
return(win_api)
}
# library(nflpredictr)
nflpredictr::predict_games(
year = 2022,
week = 1
)
devtools::load_all()
rm(list = c("predict_games"))
devtools::load_all()
library(nflpredictr)
roxygen2::roxygenise()
devtools::load_all()
usethis::use_testthat(3)
devtools::check()
devtools::document()
devtools::check()
library(testthat)
library(nflpredictr)
test_check("nflpredictr")
usethis::use_mit_license()
devtools::check()
